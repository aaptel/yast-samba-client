/* File:	include/samba-client/dialogs.ycp
 * Package:	Configuration of samba-client
 * Summary:	Dialogs definitions
 * Authors:	Stanislav Visnovsky <visnov@suse.cz>
 *
 * $Id$
 */

{

textdomain "samba-client";

import "Mode";
import "Stage";
import "Samba";
import "Label";
import "Popup";
import "Wizard";
import "Autologin";

import "SambaConfig";

include "samba-client/helps.ycp";
include "samba-client/routines.ycp";

/**
 * SAMBA workgroup dialog
 * @return dialog result
 */
symbol WorkgroupDialog () {

    /* Samba-client workgroup dialog caption */
    string caption = _("SAMBA Workgroup");
//    string template_homedir = SambaConfig::GlobalGetStr("template homedir", nil);
//    string default_template_homedir = "/home/%D/%U";
//    if (template_homedir == nil) template_homedir = default_template_homedir;

    Wizard::SetContentsButtons( caption, `HVSquash( `VBox(
	// frame label
	`Frame( _("Membership"), `VBox(
	    WorkgroupWidget(),
	    // checkbox label to enable winbind
	    `Left(`CheckBox( `id( `winbind ), 
		_("Also &Use SMB Information for Linux Authentication"), 
		Stage::cont() ? true : Samba::GetWinbind()))
//	    `TextEntry(`id(`template_homedir), _("&Home Directory Template"), template_homedir)
	) ) ) ),
	HELPS["WorkgroupDialog"]:"", Label::BackButton(),
	    Stage::cont() ? Label::NextButton() : Label::FinishButton()
    );

    if (!Stage::cont()) {
	Wizard::HideBackButton();
    } else {
	UI::ChangeWidget(`id(`winbind), `Enabled, false);
    }

    any ret = nil;
    while(true) {

	ret = UI::UserInput();
	/* abort? */
	if(ret == `abort || ret == `cancel) {
	    if(ReallyAbort()) break;
	    else continue;
	}
        else if(ret == `next || ret == `advanced ) {
	    string workgroup = (string) UI::QueryWidget( `id( `workgroup ), `Value );
	    Samba::SetWorkgroup(workgroup);
	    Samba::SetWinbind( (boolean) UI::QueryWidget(`id( `winbind ), `Value ) );
	    // for domain ask to join
	    symbol workgroup_type = CheckWorkgroup( workgroup );

	    if( Mode::config() ) break;

	    if( Samba::GetWinbind() && workgroup_type == `workgroup ) {
		// translators: error message, winbind cannot provide user information taken from a workgroup, must be a domain
		// %1 is the workgroup name
		Popup::Error( sformat( _("Cannot use the workgroup 
'%1' for Linux authentication.

Enter name of a domain or disable
using SMB for Linux authentication."), workgroup ) );
		continue;
	    }

	    // return `ok, `fail or `nojoin
	    symbol in_domain = AskJoinDomain( workgroup, workgroup_type );
	    if (in_domain == `fail) continue;
	    	    
	    // if we should start winbind, but it cannot work - not a domain, not joined
	    if (Samba::GetWinbind()) {
		if (in_domain != `ok) {
		    // translators: error message, winbind cannot provide user information if the host is not in a domain
		    Popup::Error( _("The host must be a member of a domain
for Linux authentication using SMB.

Join a domain or disable use of SMB 
for Linux authentication.
") );
		    continue;
		}
		if (ret == `next) {
		    // popup text FIXME something more descriptive...
		    Autologin::AskForDisabling(_("Samba is now enabled."));
		    break;
		}
	    }
	    
	    break;
        }
	else if(ret == `browse ) {
	
	    string new_workgroup = BrowseWorkgroups();
	    
	    if( new_workgroup != nil ) {
		// fill in the new workgroup name
		UI::ChangeWidget( `id(`workgroup), `Value, new_workgroup );
	    }
	    continue;
	} else if (ret == `back ) {
	    break;
	}
    }
    
    Wizard::RestoreNextButton();
    Wizard::RestoreBackButton();
    
    return (symbol) ret;
}

/* EOF */
}
