/* File:	include/samba-client/dialogs.ycp
 * Package:	Configuration of samba-client
 * Summary:	Dialogs definitions
 * Authors:	Stanislav Visnovsky <visnov@suse.cz>
 *
 * $Id$
 */

{

textdomain "samba-client";

import "Directory";
import "Mode";
import "Stage";
import "Samba";
import "SambaConfig";
import "Label";
import "Package";
import "Popup";
import "Wizard";
import "Autologin";

include "samba-client/helps.ycp";
include "samba-client/routines.ycp";

/**
 * popup for setting various expert settings, like winbind uid/gid keys (F301518)
 */
symbol ExpertSettingsPopup () {

    string winbind_uid	= SambaConfig::GlobalGetStr ("winbind uid","10000-20000");
    list l		= splitstring (winbind_uid, "-");
    integer uid_min	= tointeger (l[0]:"10000");
    if (uid_min == nil) uid_min = 10000;
    integer uid_max	= tointeger (l[1]:"20000");
    if (uid_max == nil) uid_max = 20000;

    string winbind_gid	= SambaConfig::GlobalGetStr ("winbind gid","10000-20000");
    l			= splitstring (winbind_gid, "-");
    integer gid_min	= tointeger (l[0]:"10000");
    if (gid_min == nil) gid_min = 10000;
    integer gid_max	= tointeger (l[1]:"20000");
    if (gid_max == nil) gid_max = 20000;

    // help text, do not translate 'winbind uid', 'winbind gid'
    string help_text	= _("Specify the range for Samba user and group IDs (<tt>winbind uid</tt> and <tt>winbind gid</tt> values).");

    UI::OpenDialog (`opt (`decorated), `HBox (
	`HWeight (1, `RichText (`id (`help), help_text)),
	`HSpacing (),
	`HWeight (3, `VBox (
	    `VSpacing (0.5),
	    // frame label
	    `Frame (_("&UID Range"), `HBox (
		// int field label
		`IntField (`id (`uid_min), _("&Minimum"), 0, 99999, uid_min),
		// int field label
		`IntField (`id (`uid_max), _("Ma&ximum"), 0, 99999, uid_max)
	    )),
	    `VSpacing (0.5),
	    // frame label
	    `Frame (_("&GID Range"), `HBox (
		// int field label
		`IntField (`id (`gid_min), _("M&inimum"), 0, 99999, gid_min),
		// int field label
		`IntField (`id (`gid_max), _("M&aximum"), 0, 99999, gid_max)
	    )),
	    `VSpacing (),
	    `HBox (
		`PushButton (`id(`ok), Label::OKButton()),
		`PushButton (`id(`cancel), Label::CancelButton())
	    )
	)),
	`HSpacing ()
    ));

    any ret	= `cancel;
    while (true)
    {
	any ret	= UI::UserInput ();
	if (ret == `cancel)
	    break;
	if (ret == `ok)
	{
	    uid_min	= (integer) UI::QueryWidget (`id (`uid_min),`Value);
	    uid_max	= (integer) UI::QueryWidget (`id (`uid_max),`Value);
	    gid_min	= (integer) UI::QueryWidget (`id (`gid_min),`Value);
	    gid_max	= (integer) UI::QueryWidget (`id (`gid_max),`Value);
	    if (uid_min >= uid_max || gid_min >= gid_max)
	    {
		// error popup: min >= max
		Popup::Error (_("The minimal value in the range cannot be be
larger than maximal one."));
		continue;
	    }
	    string winbind_uid_new = sformat ("%1-%2", uid_min, uid_max);
	    string winbind_gid_new = sformat ("%1-%2", gid_min, gid_max);
	    if (winbind_uid_new != winbind_uid)
		SambaConfig::GlobalSetStr ("winbind uid", winbind_uid_new);
	    if (winbind_gid_new != winbind_gid)
		SambaConfig::GlobalSetStr ("winbind gid", winbind_gid_new);
	    break;
	}
    }
    UI::CloseDialog ();
    return (symbol) ret;
}

/**
 * Samba memberhip dialog
 * @return dialog result
 */
symbol MembershipDialog () {
    /* Samba-client workgroup dialog caption */
    string caption = _("Windows Domain Membership");
    boolean mkhomedir	= Samba::mkhomedir;
    boolean allow_share	= true;
    integer max_shares	= Samba::GetMaxShares ();
    if (max_shares == 0)
    {
	max_shares	= 100;
	allow_share	= false;
    }
    string shares_group	= Samba::shares_group;
    boolean guest	= allow_share && Samba::GetGuessAccess ();
    term status_term	= `VBox(
	`ReplacePoint (`id(`rpstatus), `Empty())
    );
    map pw_data	= Samba::password_data;

    // internal function: update the status line
    void check_domain_membership (string domain) {

	Samba::SetWorkgroup(domain);

	if (Mode::config ())
	    return;

	// busy popup text
	Popup::ShowFeedback ("",_("Verifying domain membership..."));
	SambaAD::ReadADS (domain);
	if (SambaAD::ADS () != "")
	{
	    domain = SambaAD::GetWorkgroup (domain);
	    Samba::SetWorkgroup(domain);
	    SambaAD::ReadRealm ();
	}
	Popup::ClearFeedback ();

	UI::ReplaceWidget (`id(`rpstatus),
	    (Stage::cont () || CheckWorkgroup (domain) != `joined_domain) ?
	    // status label
	    `Empty() : `Left (`Label (_("Currently a member of this domain")))
	);
    }

    // winbind enabled on start
    boolean was_winbind	= Samba::GetWinbind();

    term winbind_term	= Stage::cont() ? `Empty () : `VBox(
	`VSpacing (0.5),
	`Left(`CheckBox(`id(`winbind), `opt (`notify),
	    // translators: checkbox label to enable winbind
	    _("Also &Use SMB Information for Linux Authentication"),
	    Samba::GetWinbind()
	))
    );

    term mkhomedir_term	= `VBox (
	`Left(`CheckBox(`id(`mkhomedir),
	    // checkbox label
	    _("&Create Home Directory on Login"), mkhomedir
	))
    );

    term autoyast_term	= Mode::config () ? `VBox (
	`VSpacing (),
	// frame label
	`Frame (_("Join Settings"), `HBox (
	    // text entry label
	    `TextEntry (`id("user"), _("&Username"),
		pw_data["user"]:"" != "" ? pw_data["user"]:"" : ""),
	    // text entry label
	    `Password (`id("password"), _("&Password"))
	)),
	`VSpacing (),
	// text entry label
	`TextEntry (`id(`ads), _("Active Directory Server"))
    ) : `Empty ();

    term ntp_term	= Mode::config () ? `Empty () : `VBox (
	`VSpacing (0.5),
	// button label (run YaST client for NTP)
	`Right (`PushButton (`id(`ntp), _("&NTP Configuration...")))
    );

    // checkbox label
    string text_nscd	= _("Disable Name Service Cache");
    // checkbox label
    string text_fam	= _("Start File Alteration Monitor");

    Wizard::SetContentsButtons( caption, `HVSquash( `VBox(
	// translators: frame label
	`Frame (_("Membership"),
	    `VBox (
		`HBox(
		    `HSpacing (0.2),
		    `TextEntry(`id(`workgroup), (Stage::cont() ?
			_("&Domain") :
			// translators: text entry label
			_("&Domain or Workgroup")), Samba::GetWorkgroupOrRealm())
		),
		status_term,
		winbind_term,
		`HBox (
		    Stage::cont () ? `Empty () : `HSpacing (2),
		    `VBox (
			mkhomedir_term,
			`Left (
			    // checkbox label
			   `CheckBox(`id(`caching),_("Off&line Authentication"),
			    Samba::GetWinbindCaching ())
			),
			`VSpacing (0.2)
		    )
		)
	    )
	),
	`VSpacing (0.5),
	// button label
	`Right (`PushButton (`id(`expert), _("&Expert Settings..."))),
	SharesTerm ($[
	    "allow_share"	: allow_share,
	    "group"		: shares_group,
	    "max_shares"	: max_shares,
	    "guest_access"	: guest
	]),
	autoyast_term,
	ntp_term
    )),
	(Stage::cont() ? HELPS["MembershipDialog_cont"]:"" :
	    HELPS["MembershipDialog_nocont"]:"") +
	HELPS["MembershipDialog_common"]:"" +
	SharesHelp () +
	(Mode::config () ? HELPS["MembershipDialog_config"]:"" :
	    HELPS["MembershipDialog_NTP"]:""),
	Label::BackButton(), Stage::cont() ? Label::NextButton() : Label::FinishButton()
    );
    foreach (symbol t, [`mkhomedir, `caching], {
	UI::ChangeWidget (`id(t), `Enabled, Samba::GetWinbind() || Stage::cont());
    });
    foreach (symbol t, [`group, `max_shares, `guest_ch], {
	UI::ChangeWidget (`id(t), `Enabled, allow_share);
    });

    if (!Stage::cont()) {
	Wizard::HideBackButton();
	check_domain_membership (Samba::GetWorkgroupOrRealm());
    }

    any ret = nil;
    while(true) {

	ret = UI::UserInput();
	boolean use_winbind = Stage::cont() ? true :
	    (boolean)UI::QueryWidget(`id(`winbind), `Value);

	/* abort? */
	if(ret == `abort || ret == `cancel) {
	    if(ReallyAbort()) break;
	    else continue;
	}
	else if (ret == `winbind) {
	    UI::ChangeWidget (`id(`mkhomedir), `Enabled, use_winbind);
	    UI::ChangeWidget (`id(`caching), `Enabled, use_winbind);
	}
	else if (ret == `share_ch) {
	    foreach (symbol t, [`group, `max_shares, `guest_ch], {
		UI::ChangeWidget (`id(t), `Enabled,
		    (boolean) UI::QueryWidget(`id(`share_ch),`Value)
		);
	    });
	}
	else if (ret == `expert)
	{
	    ExpertSettingsPopup ();
	}
	else if (ret == `ntp)
	{
	    if (Package::InstallAll ( ["yast2-ntp-client"]))
	    {
		string workgroup = (string)UI::QueryWidget(`id(`workgroup), `Value);
		string ads = SambaAD::ReadADS(workgroup);
		string tmpfile = Directory::vardir + "/ad_ntp_data.ycp";
		map <string, string> ad_data = $[
		    "ads" : ads,
		];
		SCR::Write(.target.ycp, tmpfile, ad_data);
		WFM::CallFunction ("ntp-client", []);
	    }
	}
        else if(ret == `next) {
	    string workgroup = (string)UI::QueryWidget(`id(`workgroup), `Value);
	    if (workgroup != Samba::GetWorkgroup ())
	    {
		check_domain_membership (workgroup);
		workgroup       = Samba::GetWorkgroup ();
	    }

	    Samba::SetWinbind (use_winbind);

	    // for domain ask to join
	    symbol workgroup_type = CheckWorkgroup(workgroup);

	    if (Mode::config())
	    {
		foreach (string key, [ "user", "password" ], {
		    string val = (string) UI::QueryWidget(`id(key),`Value);
		    if (val != nil && val != "")
			Samba::password_data[key]	= val;
		});
		if ((string)UI::QueryWidget(`id(`ads),`Value) != "")
		    SambaAD::SetADS ((string)UI::QueryWidget(`id(`ads),`Value));
	    }
	    else
	    {

		if (Samba::GetWinbind() && workgroup_type == `workgroup)
		{
		    Popup::Error(
		    // 1st part of an error message:
		    // winbind cannot provide user information taken from
		    // a workgroup, must be a domain; %1 is the workgroup name
		    sformat( _("Cannot use the workgroup\n'%1' for Linux authentication."), workgroup)
		    + "\n\n"
		    + (Stage::cont()
			// translators: 2nd part of an error message
			? _("Enter a valid domain.")
			// translators: 2nd part of an error message
			: _("Enter a domain or disable\nusing SMB for Linux authentication.")));
		    continue;
		}

		symbol in_domain = nil;
		if (Stage::cont() && workgroup_type != `joined_domain)
		{
		    // return `ok or `fail
		    in_domain = JoinDomain(workgroup);
		    Samba::in_domain	= in_domain;
		    if (in_domain == `fail) continue;
		}

		if (false) // we might use it to warn user (#155716)
		{
		    // continue/cancel popup
		    Popup::ContinueCancel (sformat (_("Configuring this system as a client for Active Directory resets the following
settings in smb.conf to the default values:
%1"), mergestring (["domain master", "domain logons"], "\n")));
		}
		if (!Stage::cont()) {
		    // return `ok, `fail or `nojoin
		    in_domain = AskJoinDomain(workgroup, workgroup_type);
		    if (in_domain == `fail) continue;
		    if (in_domain != `ok && Samba::GetWinbind()) {
			// 1st part of an error message:
			// winbind cannot provide user information if the host
			// is not in a domain
			Popup::Error( _("The host must be a member of a domain\nfor Linux authentication using SMB.")
			    + "\n\n"
			    // translators: 2nd part of an error message
			    + _("Join a domain or disable use of SMB\nfor Linux authentication."));
			continue;
		    }
		}
		if (Samba::GetWinbind()) {
		    // used outside this module for autologin function. must be complete sentence.
		    Autologin::AskForDisabling(_("Samba is now enabled."));
		}
	    }
	    if (Mode::config () || (Stage::cont() && Samba::in_domain == `ok))
	    {
		// yes/no popup text
		Samba::disable_dhcp_hostname	= Popup::YesNo (_("In a Microsoft environment,
hostname changes with DHCP are problematic.
Disable hostname changes with DHCP?"));
	    }

	    list<string> packages	= ["samba-winbind"];
	    if (SambaAD::ADS () != "")
	    {
		packages = (list<string>)merge(packages,["krb5","krb5-client"]);
	    }
	    packages	= Samba::UpdatedArchPackages (packages);
	    if (!Package::InstalledAll (packages))
		Package::InstallAll (packages);

	    Samba::SetMkHomeDir (use_winbind &&
		(boolean)UI::QueryWidget(`id(`mkhomedir), `Value));
	    Samba::SetWinbindCaching (use_winbind &&
		(boolean)UI::QueryWidget(`id(`caching), `Value));

	    boolean new_share = (boolean)UI::QueryWidget(`id(`share_ch),`Value);
	    if (new_share && ! allow_share && SharesExist (Samba::shares_dir))
	    {
		Samba::remove_shares = AskForSharesRemoval ();
	    }
	    integer max = (integer)UI::QueryWidget(`id(`max_shares),`Value);
	    if (!new_share)
	    {
		max = 0;
		if (allow_share)
		    Samba::stop_services	= AskToStopServices ();
	    }
	    Samba::SetShares (max,(string)UI::QueryWidget(`id(`group),`Value));
	    Samba::SetGuessAccess (new_share &&
		(boolean)UI::QueryWidget(`id(`guest_ch), `Value));
	    if(!Stage::cont() && !Mode::config() && use_winbind&& !was_winbind){
		// message popup, part 1/2
		Popup::Message (
_("This change only affects newly created processes and not already
running services. Restart your services manually or reboot 
the machine to enable it for all services.
"));
	    }
	    break;
	} else if (ret == `back ) {
	    break;
	}
    }

    Wizard::RestoreNextButton();
    Wizard::RestoreBackButton();
    return (symbol) ret;
}

/* EOF */
}
