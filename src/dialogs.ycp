/* File:	include/samba-client/dialogs.ycp
 * Package:	Configuration of samba-client
 * Summary:	Dialogs definitions
 * Authors:	Stanislav Visnovsky <visnov@suse.cz>
 *
 * $Id$
 */

{

textdomain "samba-client";

import "Mode";
import "Stage";
import "Samba";
import "Label";
import "PackageSystem";
import "Popup";
import "Wizard";
import "Autologin";

include "samba-client/helps.ycp";
include "samba-client/routines.ycp";

/**
 * Samba memberhip dialog
 * @return dialog result
 */
symbol MembershipDialog () {
    /* Samba-client workgroup dialog caption */
    string caption = _("Windows Domain Membership");
    boolean mkhomedir	= Samba::mkhomedir;
    boolean allow_share	= true;
    integer max_shares	= Samba::GetMaxShares ();
    if (max_shares == 0)
    {
	max_shares	= 100;
	allow_share	= false;
    }
    string shares_group	= Samba::shares_group;

    term status_term	= `VBox(
	`ReplacePoint (`id(`rpstatus), `Empty())
    );

    // internal function: update the status line
    void check_domain_membership (string domain) {

	Samba::SetWorkgroup(domain);

	// busy popup text
	Popup::ShowFeedback ("",_("Verifying domain membership..."));
	SambaAD::ReadADS (domain);
	if (SambaAD::ADS () != "")
	{
	    domain = SambaAD::GetWorkgroup (domain);
	    Samba::SetWorkgroup(domain);
	    SambaAD::ReadRealm ();
	}
	Popup::ClearFeedback ();

	UI::ReplaceWidget (`id(`rpstatus),
	    (Stage::cont () || CheckWorkgroup (domain) != `joined_domain) ?
	    // status label
	    `Empty() : `Left (`Label (_("Currently a member of this domain")))
	);
    }


    term winbind_term	= Stage::cont() ? `Empty () : `VBox(
	`VSpacing (0.5),
	`Left(`CheckBox(`id(`winbind), `opt (`notify),
	    // translators: checkbox label to enable winbind
	    _("Also &Use SMB Information for Linux Authentication"),
	    Samba::GetWinbind()
	))
    );

    term mkhomedir_term	= `VBox (
	`Left(`CheckBox(`id(`mkhomedir),
	    // checkbox label
	    _("Create Home Directory on Login"), mkhomedir
	))
    );

    term autoyast_term	= Mode::config () ? `VBox (
	`VSpacing (),
	// frame label
	`Frame (_("Join Settings"), `HBox (
	    // text entry label
	    `TextEntry (`id("username"), _("&Username")),
	    // text entry label
	    `Password (`id("passwd"), _("&Password"))
	)),
	`VSpacing (),
	// text entry label
	`TextEntry (`id(`ads), _("Active Directory Server"))
    ) : `Empty ();

    // checkbox label
    string text_nscd	= _("Disable Name Service Cache");
    // checkbox label
    string text_fam	= _("Start File Alteration Monitor");

    Wizard::SetContentsButtons( caption, `HVSquash( `VBox(
	// translators: frame label
	`Frame (_("Membership"),
	    `VBox (
		`HBox(
		    `HSpacing (0.2),
		    `TextEntry(`id(`workgroup), (Stage::cont() ?
			// translators: text entry label
			_("&Domain") :
			// translators: text entry label
			_("&Domain or Workgroup")), Samba::GetWorkgroupOrRealm()),
		    `VBox (
			`Label(""),
			// translators: push button label
			`PushButton(`id(`browse), _("&Browse..."))
		    )
		),
		status_term,
		winbind_term,
		`HBox (
		    Stage::cont () ? `Empty : `HSpacing (2),
		    `VBox (
			mkhomedir_term,
			`Left (
			    // checkbox label
			   `CheckBox(`id(`caching),_("Off&line Authentication"),
			    Samba::GetWinbindCaching ())
			),
			`VSpacing (0.2)
		    )
		)
	    )
	),
	GetSharesTerm (allow_share, shares_group, max_shares),
	autoyast_term
    )),
	(Stage::cont() ? HELPS["MembershipDialog_cont"]:"" :
	    HELPS["MembershipDialog_nocont"]:"") +
	HELPS["MembershipDialog_common"]:"" +
	SharesHelp () +
	(Mode::config () ? HELPS["MembershipDialog_config"]:"" : ""),
	Label::BackButton(), Stage::cont() ? Label::NextButton() : Label::FinishButton()
    );
    foreach (symbol t, [`mkhomedir, `caching], {
	UI::ChangeWidget (`id(t), `Enabled, Samba::GetWinbind() || Stage::cont());
    });
    foreach (symbol t, [`group, `max_shares], {
	UI::ChangeWidget (`id(t), `Enabled, allow_share);
    });

    if (!Stage::cont()) {
	Wizard::HideBackButton();
	check_domain_membership (Samba::GetWorkgroupOrRealm());
    }
    if (Mode::config ()) {
	UI::ChangeWidget (`id(`browse), `Enabled, false);
    }

    any ret = nil;
    while(true) {

	ret = UI::UserInput();
	boolean use_winbind = Stage::cont() ? true :
	    (boolean)UI::QueryWidget(`id(`winbind), `Value);

	/* abort? */
	if(ret == `abort || ret == `cancel) {
	    if(ReallyAbort()) break;
	    else continue;
	}
	else if (ret == `winbind) {
	    UI::ChangeWidget (`id(`mkhomedir), `Enabled, use_winbind);
	    UI::ChangeWidget (`id(`caching), `Enabled, use_winbind);
	}
	else if (ret == `share_ch) {
	    foreach (symbol t, [`group, `max_shares], {
		UI::ChangeWidget (`id(t), `Enabled,
		    (boolean) UI::QueryWidget(`id(`share_ch),`Value)
		);
	    });
	}
        else if(ret == `next) {
	    string workgroup = (string)UI::QueryWidget(`id(`workgroup), `Value);
	    if (workgroup != Samba::GetWorkgroup ())
		check_domain_membership (workgroup);

	    Samba::SetWinbind (use_winbind);

	    // for domain ask to join
	    symbol workgroup_type = CheckWorkgroup(workgroup);

	    if (Mode::config())
	    {
		foreach (string key, [ "username", "passwd" ], {
		    string val = (string) UI::QueryWidget(`id(key),`Value);
		    if (val != nil && val != "")
			Samba::password_data[key]	= val;
		});
		if ((string)UI::QueryWidget(`id(`ads),`Value) != "")
		    SambaAD::SetADS ((string)UI::QueryWidget(`id(`ads),`Value));
		break;
	    }

	    if (Samba::GetWinbind() && workgroup_type == `workgroup ) {
		// translators: error message, winbind cannot provide user information taken
		// from a workgroup, must be a domain; %1 is the workgroup name
		Popup::Error(
		    // translators: 1st part of an error message, winbind cannot provide user information taken from a workgroup, must be a domain; %1 is the workgroup name
		    sformat( _("Cannot use the workgroup\n'%1' for Linux authentication."), workgroup)
		    + "\n\n"
		    + (Stage::cont()
			// translators: 2nd part of an error message
			? _("Enter a valid domain.")
			// translators: 2nd part of an error message
			: _("Enter a domain or disable\nusing SMB for Linux authentication.")));
		continue;
	    }

	    symbol in_domain = nil;
	    if (Stage::cont() && workgroup_type != `joined_domain) {
		// return `ok or `fail
		in_domain = JoinDomain(workgroup);
		if (in_domain == `fail) continue;
	    }

	    if (false) // we might use it to warn user (#155716)
	    {
		// continue/cancel popup
		Popup::ContinueCancel (sformat (_("Configuring this system as a client for Active Directory resets the following
settings in smb.conf to the default values:
%1"), mergestring (["domain master", "domain logons"], "\n")));
	    }
	    if (!Stage::cont()) {
		// return `ok, `fail or `nojoin
		in_domain = AskJoinDomain(workgroup, workgroup_type);
		if (in_domain == `fail) continue;
		if (in_domain != `ok && Samba::GetWinbind()) {
		    // translators: 1st part of an error message, winbind cannot provide user information if the host is not in a domain
		    Popup::Error( _("The host must be a member of a domain\nfor Linux authentication using SMB.")
			+ "\n\n"
		        // translators: 2nd part of an error message
		        + _("Join a domain or disable use of SMB\nfor Linux authentication."));
		    continue;
		}
	    }
	    if (Samba::GetWinbind()) {
	        // used outside this module for autologin function. must be complete sentence.
	        Autologin::AskForDisabling(_("Samba is now enabled."));
	    }

	    list<string> packages	= ["samba-winbind"];
	    if (SambaAD::ADS () != "")
	    {
		packages = (list<string>)merge(packages,["krb5","krb5-client"]);
	    }
	    PackageSystem::CheckAndInstallPackages (packages);
	    Samba::SetMkHomeDir (use_winbind &&
		(boolean)UI::QueryWidget(`id(`mkhomedir), `Value));
	    Samba::SetWinbindCaching (use_winbind &&
		(boolean)UI::QueryWidget(`id(`caching), `Value));

	    boolean new_share = (boolean)UI::QueryWidget(`id(`share_ch),`Value);
	    if (new_share && ! allow_share && SharesExist (Samba::shares_dir))
	    {
		Samba::remove_shares = AskForSharesRemoval ();
	    }
	    integer max = (integer)UI::QueryWidget(`id(`max_shares),`Value);
	    if (!new_share)
	    {
		max = 0;
		if (allow_share)
		    Samba::stop_services	= AskToStopServices ();
	    }
	    Samba::SetShares (max,(string)UI::QueryWidget(`id(`group),`Value));
	    break;
        } else if (ret == `browse) {

	    string new_workgroup = BrowseNeighbours( Stage::cont() );
	    if( size (new_workgroup) > 0 ) {
		// fill in the new workgroup name
		UI::ChangeWidget( `id(`workgroup), `Value, new_workgroup );
		check_domain_membership (new_workgroup);
	    }
	    continue;
	} else if (ret == `back ) {
	    break;
	}
    }

    Wizard::RestoreNextButton();
    Wizard::RestoreBackButton();
    return (symbol) ret;
}

/* EOF */
}
