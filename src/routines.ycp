/**
 * File:	include/samba-client/routines.ycp
 * Package:	Configuration of samba-client
 * Summary:	Miscelanous functions for configuration of samba-client.
 * Authors:	Stanislav Visnovsky <visnov@suse.cz>
 *
 * $Id$
 */

{

textdomain "samba-client";

/**
 * Abort function
 * @return blah blah lahjk
 */
global define boolean Abort() ``{
    if(AbortFunction != nil)
	return eval(AbortFunction) == true;
    return false;
}

/**
 * Check for pending Abort press
 * @return true if pending abort
 */
global define boolean PollAbort() ``{
    return UI::PollInput() == `abort;
}

/**
 * Allow user to type in a password in a popup.
 *
 * @param text	a text to be displayed above the password text entry
 * @return string entered password or nil on cancel
 */
global define string passwordPopup( string text ) ``{
    UI::OpenDialog(
    	    `VBox( 
    		`Password(`id(`passwd), text),
    		`HBox( 
		    `PushButton(`id(`ok), `opt(`default), Label::OKButton() ), 
		    `PushButton(`id(`cancel), Label::CancelButton() ) 
		)
    	    )
        );
    
    symbol ret = UI::UserInput();
    
    string passwd = ret == `ok ? UI::QueryWidget(`id(`passwd), `Value) : nil;
    UI::CloseDialog();
    
    return passwd;
}

/**
 * Allow user to type in a user/password pair in a popup.
 *
 * @param message	a text to be displayed above the password text entry
 * @param defaultuser 	a pre-filled user name
 * @return map		$["user": string, "password": string] with information
 *			provided by the user or nil on cancel
 */
global define map passwordUserPopup( string message, string defaultuser ) ``{
    UI::OpenDialog(
    	    `VBox( 
		`Label( message ),
		`TextEntry(`id(`user), _("User name:"), defaultuser ),
    		`Password(`id(`passwd), _("Password:") ),
    		`HBox( 
		    `PushButton(`id(`ok), `opt(`default), Label::OKButton() ), 
		    `PushButton(`id(`cancel), Label::CancelButton() ) 
		)
    	    )
        );
    
    symbol ret = UI::UserInput();
    
    map result = ret == `ok ? $[ 
	"user":UI::QueryWidget(`id(`passwd), `Value),
	"password":UI::QueryWidget(`id(`passwd), `Value) ] 
    : nil;

    UI::CloseDialog();
    
    return result;
}

/**
 * If modified, ask for confirmation
 * @return true if abort is confirmed
 */
global define boolean ReallyAbort() ``{
    return !Modified() || Popup::ReallyAbort(true);
}

/**
 * Progress::NextStage and Progress::Title combined into one function
 * @param title progressbar title
 */
global define void ProgressNextStage(string title) ``{
    Progress::NextStage();
    Progress::Title(title);
}

/**
 * Return a complex widget for setting a workgroup or domain. Contains Browse button.
 *
 * @return term the widget term
 */
global define term WorkgroupWidget() ``{
    return `HBox( `TextEntry( `id(`workgroup), _("Domain or workgroup"), Samba::workgroup ),
                `VBox(
                    `Label(""),
                    `PushButton( `id(`browse), _("Browse") )
                )
            );
}

/*
 * Do not repeat the last test of domain/workgroup
 */
global string lastCheckedDomain = nil;

/*
 * Do not repeat the last test of domain/workgroup
 */
global symbol lastCheckedDomainResult = nil;

/**
 * Check, if the workgroup is a domain or a workgroup. If it is a domain,
 * offer to join the domain. Uses caching to avoid long checks of a workgroup members.
 *
 * @param workgroup	the workgroup to be checked
 * @return symbol	type of the workgroup: `domain, `workgroup or nil if error
 */
global define symbol CheckWorkgroup( string workgroup ) ``{
    symbol ret = nil;
    // cached
    if( lastCheckedDomain == workgroup ) return lastCheckedDomainResult;
	    
    UI::OpenDialog( `VBox( `Label( _("Verifying workgroup membership...") ) ) );
	    
    if(  Samba::isDomain(workgroup) ) {
	// handle domain joining
	boolean res = Samba::isDomainMember( workgroup );
		
	UI::CloseDialog();
		
	// caching
	lastCheckedDomain = workgroup;
	lastCheckedDomainResult = `domain;
		
	// we the host is already in domain, continue
	if( res ) return `domain;
		
	// allow to join the domain
	if( res == nil ) {
	    ret = Popup::YesNo( sformat( _("Cannot automatically determine, if this host
is a member of the domain '%1'.\n
Do you want to join the domain '%1'?"), workgroup  ) );
	} else {
	    if( Popup::YesNo( sformat( _("This host is not a member 
of the domain '%1'.\n
Do you want to join the domain '%1'?"), workgroup  ) ) ) ret = `yes;
	    else ret = `no;
	}
		
	if( ret == `yes ) {
	    // change the dialog result back to next
	    ret = `next;
	    map passwd = passwordUserPopup( sformat( _("Enter the user and the password
for joining the domain '%1'.\n
To join the domain anonymously leave the 
text entries empty."), workgroup ), "Administrator" );
	    // cancelled the domain joining
	    if( passwd == nil ) return nil;
		    
	    // try to join the domain
	    string error = Samba::joinDomain( workgroup, passwd["user"]:nil, passwd["password"]:"" );
	    if(  error != nil )
	    {
		Popup::Error( error );
		return nil;
	    }
	    // Translators: Information popup, %1 is the name of the domain
	    else Popup::Message( sformat( _("Domain '%1' was successfully joined."), Samba::workgroup )) ;
	}
    } else {
	UI::CloseDialog();
	return `workgroup;
    }
    
    return `domain;
}

/**
 * Show a selection popup to select a workgroup from the ones existing on LAN.
 *
 * @return string chosen workgroup or nil if cancelled
 */
global define string BrowseWorkgroups() ``{
   list groups = Samba::availableWorkgroups();

    if( groups == nil ) return nil;

    // let the user choose a workgroup
    UI::OpenDialog( `VBox(
        `SelectionBox( `id(`selection), _("Existing workgroups:"), groups ),
        `HBox(
            `PushButton( `id(`ok), Label::OKButton() ),
            `PushButton( `id(`cancel), Label::CancelButton() )
        )
    ) );

    ret = UI::UserInput();
    string sel = UI::QueryWidget( `id(`selection), `CurrentItem );
    UI::CloseDialog();
    
    return ret == `ok ? sel : nil;
}

/* EOF */
}
