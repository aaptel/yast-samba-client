{

include "testsuite.ycp";
    
import "SambaConfig";
    
DUMP(!SambaConfig::GetModified());
DUMP(SambaConfig::GetShares());

DUMP("*** [test] A");
DUMP(SambaConfig::ShareKeys("test"));
DUMP(!SambaConfig::ShareExists("test"));
DUMP(!SambaConfig::ShareGetModified("test"));
SambaConfig::ShareSetModified("test");
DUMP(SambaConfig::ShareGetModified("test"));

DUMP("*** [test] B");
DUMP(SambaConfig::ShareSetStr("test", "directory", "test1"));
DUMP(SambaConfig::ShareSetTruth("test", "public", true));
DUMP(SambaConfig::ShareSetInteger("test", "os level", 1));
DUMP(SambaConfig::ShareSetTruth("test", "writable", true));

DUMP("*** [test] C");
DUMP(SambaConfig::ShareKeys("test"));
DUMP(SambaConfig::ShareGetMap("test"));
DUMP(SambaConfig::ShareExists("test"));

DUMP("*** [test] D");
DUMP(SambaConfig::ShareGetStr("test", "directory", nil));
DUMP(SambaConfig::ShareGetTruth("test", "public", nil));
DUMP(SambaConfig::ShareGetInteger("test", "os level", nil));
DUMP(SambaConfig::ShareGetStr("test", "writeable", nil));
DUMP(SambaConfig::ShareGetInteger("test", "xxx", nil));

DUMP("*** [test] E");
DUMP(SambaConfig::ShareRemove("test"));
DUMP(!SambaConfig::ShareExists("test"));
DUMP(!SambaConfig::ShareRemove("test"));

DUMP("*** [homes] A");
DUMP(SambaConfig::HomesKeys());
DUMP(!SambaConfig::HomesExists());
DUMP(!SambaConfig::HomesGetModified());
SambaConfig::HomesSetModified();
DUMP(SambaConfig::HomesGetModified());

DUMP("*** [homes] B");
DUMP(SambaConfig::HomesSetStr("directory", "homes1"));
DUMP(SambaConfig::HomesSetTruth("public", true));
DUMP(SambaConfig::HomesSetInteger("os level", 3));
DUMP(SambaConfig::HomesSetTruth("writable", true));

DUMP("*** [homes] C");
DUMP(SambaConfig::HomesKeys());
DUMP(SambaConfig::HomesGetMap());
DUMP(SambaConfig::HomesExists());

DUMP("*** [homes] D");
DUMP(SambaConfig::HomesGetStr("directory", nil));
DUMP(SambaConfig::HomesGetTruth("public", nil));
DUMP(SambaConfig::HomesGetInteger("os level", nil));
DUMP(SambaConfig::HomesGetStr("writeable", nil));
DUMP(SambaConfig::HomesGetInteger("xxx", nil));

DUMP("*** [homes] E");
DUMP(SambaConfig::HomesRemove());
DUMP(!SambaConfig::HomesExists());
DUMP(!SambaConfig::HomesRemove());
DUMP(SambaConfig::HomesSetMap($[
    "directory": "homes2",
    "public": "No",
    "os level": "4",
    "writeable": "No" ]));
DUMP(SambaConfig::HomesGetMap());

DUMP("*** [homes] F");
DUMP(SambaConfig::HomesEnabled());
DUMP(SambaConfig::HomesDisable());
DUMP(!SambaConfig::HomesEnabled());
DUMP(SambaConfig::HomesEnable());
DUMP(!SambaConfig::HomesAdjust(true));
DUMP(SambaConfig::HomesEnabled());


DUMP("*** [global] A");
DUMP(SambaConfig::GlobalKeys());
DUMP(!SambaConfig::GlobalExists());
DUMP(!SambaConfig::GlobalGetModified());
SambaConfig::GlobalSetModified();
DUMP(SambaConfig::GlobalGetModified());

DUMP("*** [global] B");
DUMP(SambaConfig::GlobalSetStr("directory", "global1"));
DUMP(SambaConfig::GlobalSetTruth("public", true));
DUMP(SambaConfig::GlobalSetInteger("os level", 8));
DUMP(SambaConfig::GlobalSetTruth("writable", true));

DUMP("*** [global] C");
DUMP(SambaConfig::GlobalKeys());
DUMP(SambaConfig::GlobalGetMap());
DUMP(SambaConfig::GlobalExists());

DUMP("*** [global] D");
DUMP(SambaConfig::GlobalGetStr("directory", nil));
DUMP(SambaConfig::GlobalGetTruth("public", nil));
DUMP(SambaConfig::GlobalGetInteger("os level", nil));
DUMP(SambaConfig::GlobalGetStr("writeable", nil));
DUMP(SambaConfig::GlobalGetInteger("xxx", nil));

DUMP("*** [global] E");
DUMP(SambaConfig::GlobalRemove());
DUMP(!SambaConfig::GlobalExists());
DUMP(!SambaConfig::GlobalRemove());
DUMP(SambaConfig::GlobalSetMap($[
    "directory": "global2",
    "public": "No",
    "os level": "9",
    "writeable": "No" ]));
DUMP(SambaConfig::GlobalGetMap());

DUMP("*** [global] F");
DUMP(SambaConfig::GlobalEnabled());
DUMP(SambaConfig::GlobalDisable());
DUMP(!SambaConfig::GlobalEnabled());
DUMP(SambaConfig::GlobalEnable());
DUMP(!SambaConfig::GlobalAdjust(true));
DUMP(SambaConfig::GlobalEnabled());

DUMP("*** global");
//SambaConfig::Dump();
DUMP(SambaConfig::GetModified());
DUMP(SambaConfig::GetShares());
DUMP(SambaConfig::ShareRemove("test"));
DUMP(SambaConfig::GetShares());
DUMP(!SambaConfig::ShareExists("test"));
DUMP(SambaConfig::Write(false));
DUMP(!SambaConfig::GetModified());

}

